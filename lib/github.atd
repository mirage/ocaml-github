type error = {
  resource: string;
  ?field: string option;
  code: string;
} <ocaml field_prefix="error_">

type message = {
  message: string;
  ~errors <ocaml default="[]">: error list;
} <ocaml field_prefix="message_">

type scope = [
  | User <json name="user">
  | UserEmail <json name="user:email">
  | UserFollow <json name="user:follow">
  | Public_repo <json name="public_repo">
  | Repo <json name="repo">
  | Repo_deployment <json name="repo_deployment">
  | Repo_status <json name="repo:status">
  | Delete_repo <json name="delete_repo">
  | Notifications <json name="notifications">
  | Gist <json name="gist">
  | Read_repo_hook <json name="read:repo_hook">
  | Write_repo_hook <json name="write:repo_hook">
  | Admin_repo_hook <json name="admin:repo_hook">
  | Read_org <json name="read:org">
  | Write_org <json name="write:org">
  | Admin_org <json name="admin:org">
  | Read_public_key <json name="read:public_key">
  | Write_public_key <json name="write:public_key">
  | Admin_public_key <json name="admin:public_key">
]

type app = {
  name: string;
  url: string;
}  <ocaml field_prefix="app_">

type auth_req = {
  ~scopes: scope list;
   note: string;
  ?note_url: string option;
  ?client_id: string option;
  ?client_secret: string option;
} <ocaml field_prefix="auth_req_">

type auth = {
  scopes: scope list;
  token: string;
  app: app;
  url: string;
  id: int;
  ?note: string option;
  ?note_url: string option;
} <ocaml field_prefix="auth_">

type auths = auth list

type new_issue = {
  title: string;
  ?body: string option;
  ?assignee: string option;
  ?milestone: int option;
  ~labels: string list;
} <ocaml field_prefix="new_issue_">

type issue_sort = [
  | Created <json name="created">
  | Updated <json name="updated">
  | Comments <json name="comments">
]

type state = [
  | Open <json name="open">
  | Closed <json name="closed">
]

type direction = [
  | Asc <json name="asc">
  | Desc <json name="desc">
]

type user = {
  login: string;
  id: int;
  ?avatar_url: string option;
  ?gravatar_id: string option;
  url: string;
} <ocaml field_prefix="user_">

type user_type = [
  | User <json name="User">
  | Organization <json name="Organization">
]

type user_info = {
  login: string;
  id: int;
  ?avatar_url: string option;
  ?gravatar_id: string option;
  url: string;
  ?name: string option;
  ?company: string option;
  ?blog: string option;
  ?location: string option;
  ?email: string option;
  ~hireable: bool;
  ~bio: string;
  ~public_repos: int;
  ~public_gists: int;
  ~followers: int;
  ~following: int;
  html_url: string;
  created_at: string;
  ty <json name="type">: user_type;
} <ocaml field_prefix="user_info_">
 
type label = {
  url: string;
  name: string;
  color: string;
} <ocaml field_prefix="label_">

type milestone_sort = [
  | Due_date <json name="due_date">
  | Completeness <json name="completeness">
]

type new_milestone = {
  title: string;
  ~state <ocaml default="`Open">: state;
  ?description: string option;
  ?due_on: string option;
} <ocaml field_prefix="new_milestone_">

type update_milestone = {
  ?title: string option;
  ?state: state option;
  ?description: string option;
  ?due_on: string option;
} <ocaml field_prefix="update_milestone_">

type milestone = {
  url: string;
  number: int;
  ~state <ocaml default="`Open">: state;
  ~title: string;
  ~description: string;
  ?creator: user option;
  open_issues: int;
  closed_issues: int;
  created_at: string;
  ?due_on: string option;
} <ocaml field_prefix="milestone_"> 

type milestones = milestone list

type issue = {
  url: string;
  html_url: string;
  number: int;
  ~state <ocaml default="`Open">: state;
  title: string;
  ~body: string;
  user: user;
  labels: label list;
  ~comments: int;
  ~created_at: string;
  ~updated_at: string;
  ?closed_at: string option;
  ?milestone: milestone option;
  ~sort <ocaml default="`Created">: issue_sort;
  ~direction <ocaml default="`Desc">: direction;
  ?mentioned: string list option;
} <ocaml field_prefix="issue_">

type issues = issue list

type issue_comment = {
  id: int;
  url: string;
  body: string;
  user: user;
  created_at: string;
  updated_at: string;
} <ocaml field_prefix="issue_comment_">

type issue_comments = issue_comment list

type new_issue_comment = {
  body: string;
} <ocaml field_prefix="new_issue_comment_">

type repo_commit = {
  sha: string;
  url: string;
} <ocaml field_prefix="repo_commit_">

type repo_tag = {
  name: string;
  commit: repo_commit;
  zipball_url: string;
  tarball_url: string;
} <ocaml field_prefix="repo_tag_">

type repo_tags = repo_tag list

type repo_branch = {
  name: string;
  commit: repo_commit;
} <ocaml field_prefix="repo_branch_">

type repo_branches = repo_branch list

type obj_type = [
    Blob <json name="blob">
  | Tree <json name="tree">
  | Commit <json name="commit">
  | Tag <json name="tag">
]

type obj = {
  ty <json name="type">: obj_type;
  sha: string;
  url: string;
} <ocaml field_prefix="obj_">

type git_ref = {
  name <json name="ref">: string;
  url: string;
  obj <json name="object">: obj;
} <ocaml field_prefix="git_ref_">

type git_refs = git_ref list

type info = {
  date: string;
  email: string;
  name: string;
} <ocaml field_prefix="info_">

type tag = {
  obj <json name="object">: obj;
  url: string;
  sha: string;
  tag: string;
  message: string;
  tagger: info;
} <ocaml field_prefix="tag_">

type git_commit = {
  url: string;
  author: info;
  message: string;
} <ocaml field_prefix="git_commit_">

type commit = {
  url: string;
  sha: string;
  git <json name="commit">: git_commit;
  ?author: user option; (* why? *)
  ?committer: user option; (* why? *)
} <ocaml field_prefix="commit_">

type commits = commit list

type repo = {
  id: int;
  owner: user;
  name: string;
  full_name: string;
  description: string;
  ~private: bool;
  fork: bool;
  url: string;
  html_url: string;
  clone_url: string;
  git_url: string;
  ssh_url: string;
  svn_url: string;
  ?mirror_url: string option;
  ~homepage: string;
  forks: int;
  forks_count: int;
  watchers: int;
  watchers_count: int;
  size: int;
  ?master_branch: string option;
  open_issues: int;
  ?pushed_at: string option;
  created_at: string;
  updated_at: string;
  ?organization: user option;
  has_issues: bool;
  has_wiki: bool;
  has_downloads: bool;
} <ocaml field_prefix="repo_">

type repos = repo list

type branch = {
  label: string;
  ref: string;
  sha: string;
  user: user;
  ?repo: repo option;
} <ocaml field_prefix="branch_">

type link = {
  href: string;
}

type pull_links = {
  self: link;
  html: link;
  comments: link;
  review_comments: link;
} <ocaml field_prefix="pull_">

type pull = {
  url: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  number: int;
  ~state <ocaml default="`Open">: state;
  title: string;
  ~body: string;
  created_at: string;
  updated_at: string;
  ?closed_at: string option;
  ?merged_at: string option;
  head: branch;
  base: branch;
  links <json name="_links">: pull_links;
  user: user;
} <ocaml field_prefix="pull_">

type pulls = pull list

type new_pull = {
  title: string;
  ?body: string option;
  base: string;
  head: string;
} <ocaml field_prefix="new_pull_">

type new_pull_issue = {
  issue: int;
  base: string;
  head: string;
} <ocaml field_prefix="new_pull_issue_">

type update_pull = {
  ?title: string option;
  ?body: string option;
  ?state: state option;
} <ocaml field_prefix="update_pull_">

type file = {
  ?sha: string option; (* e.g. if status is 'renamed', this is None *)
  filename: string;
  status: string; (* TODO: variant? at least "added" *)
  additions: int;
  deletions: int;
  changes: int;
  blob_url: string;
  raw_url: string;
  ?patch: string option;
} <ocaml field_prefix="file_">

type files = file list

type merge_request = {
  ?commit_message: string option;
} <ocaml field_prefix="merge_">

type merge = {
  ?sha: string option;
  merged: bool;
  message: string;
} <ocaml field_prefix="merge_">

type event_type = [
  | CommitComment <json name="commit_comment">
  | Create <json name="create">
  | Delete <json name="delete">
  | Download <json name="download">
  | Follow <json name="follow">
  | Fork <json name="fork">
  | ForkApply <json name="fork_apply">
  | Gist <json name="gist">
  | Gollum <json name="gollum">
  | IssueComment <json name="issue_comment">
  | Issues <json name="issues">
  | Member <json name="member">
  | Public <json name="public">
  | PullRequest <json name="pull_request">
  | PullRequestReviewComment <json name="pull_request_review_comment">
  | Push <json name="push">
  | Status <json name="status">
  | TeamAdd <json name="team_add">
  | Watch <json name="watch">
]

type pull_action_type = [
  | Opened <json name="opened">
  | Closed <json name="closed">
  | Synchronize <json name="synchronize">
  | Reopened <json name="reopened">
]

type pull_action = {
  action: pull_action_type;
  number: int;
  pull_request: pull;
} <ocaml field_prefix="pull_action_">

type pull_comment_action = {
  comment: issue_comment;
} <ocaml field_prefix="pull_comment_action_">

type event = {
  ty <json name="type">: event_type;
  public: bool;
(*  payload  TODO: this is the event data with type determined by constructor field ty *)
  actor: user;
  org: user;
  created_at: string;
  id: int; (* TODO: too small? *)
} <ocaml field_prefix="event_">

type web_hook_config = {
  url: string;
  content_type: string;
  insecure_ssl: string; (* TODO: should be bool but GitHub doesn't respect their own schema *)
  ?secret: string option;
} <ocaml field_prefix="web_hook_config_">

type hook = {
  url: string;
  updated_at: string;
  created_at: string;
  name: string;
  events: event_type list;
  active: bool;
  config: web_hook_config; (* TODO: determined by constructor field name *)
  id: int;
} <ocaml field_prefix="hook_">

type hooks = hook list

type new_hook = {
  name: string;
  config: web_hook_config; (* TODO: determined by constructor field name *)
  events: event_type list;
  active: bool;
} <ocaml field_prefix="new_hook_">

type update_hook = {
  name: string;
  config: web_hook_config; (* TODO: determined by constructor field name *)
  ?events: event_type list option;
  active: bool;
} <ocaml field_prefix="update_hook_">

type status_state = [
  | Pending <json name="pending">
  | Success <json name="success">
  | Failure <json name="failure">
  | Error <json name="error">
]

type status = {
  url: string;
  updated_at: string;
  created_at: string;
  id: int;
  state: status_state;
  ?target_url: string option;
  ?description: string option;
  creator: user;
} <ocaml field_prefix="status_">

type statuses = status list

type new_status = {
  state: status_state;
  ?target_url: string option;
  ?description: string option;
} <ocaml field_prefix="new_status_">

type release = {
  id: int;
  tag_name: string;
  ?target_commitish: string option; 
  name: string;
  body: string;
  draft: bool;
  prerelease: bool;
  ~created_at: string;
  ~published_at: string;
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
} <ocaml field_prefix="release_">

type releases = release list

type release_repo = {
  user: string;
  repo: string;
  release: release;
} <ocaml field_prefix="release_repo_">
type release_repos = release_repo list

type new_release = {
  tag_name: string;
  target_commitish: string;
  name: string;
  body: string;
  draft: bool;
  prerelease: bool;
} <ocaml field_prefix="new_release_">

type update_release = {
  ?tag_name: string option;
  ?target_commitish: string option;
  ?name: string option;
  ?body: string option;
  ?draft: bool option;
  ?prerelease: bool option;
} <ocaml field_prefix="update_release_">

type deploy_key = {
  id: int;
  key: string;
  url: string;
  title: string;
} <ocaml field_prefix="deploy_key_">

type deploy_keys = deploy_key list

type new_deploy_key = {
  title: string;
  key: string;
} <ocaml field_prefix="new_deploy_key_">

(* GIST related datatypes *)

type gist_file = {
  size : int;
  raw_url : string;
  ty <json name="type">: string;
  ?truncated : bool option;
  ?language : string option;
  ?content : string option;
} <ocaml field_prefix="gist_file_">

type gist_files = (string * gist_file) list <json repr="object">

type gist_fork = {
  user : user;
  url : string;
  id : int;
  created_at : string;
  updated_at : string;
} <ocaml field_prefix="gist_fork_">

type gist_forks = gist_fork list

type change_status = {
  deletions : int;
  additions : int;
  total : int;
} <ocaml field_prefix="change_status">

type gist_history = {
  url : string;
  version : string;
  user : user;
  change_status : change_status;
  committed_at : string;
} <ocaml field_prefix="gist_history">

type gist_history_list = gist_history list

type gist = {
  url : string;
  forks_url : string;
  commits_url : string;
  id : string;
  ?description : string option;
  public : bool;
  owner : user;
  ?user : string option;
  files : gist_files;
  comments : int;
  comments_url : string;
  html_url : string;
  git_pull_url : string;
  git_push_url : string;
  created_at : string;
  updated_at : string;
  ?forks : gist_fork list option;
  ?history : gist_history_list option;
} <ocaml field_prefix="gist_">

type gists = gist list

type gist_create_content = {
  content : string;
} <ocaml field_prefix="gist_create_">

type gist_create_contents = (string * gist_create_content) list <json repr="object">

type gist_create = {
  description : string;
  public : bool;
  files : gist_create_contents;
} <ocaml field_prefix="gist_create_">

type gist_edit = {
  ?content : string option;
  ?filename : string option;
} <ocaml field_prefix="gist_edit_">

type gist_edits = {
  description : string;
  files : (string * gist_edit) list <json repr="object">
} <ocaml field_prefix="gist_edit_">

type team = {
  url: string;
  name: string;
  id: int;
} <ocaml field_prefix="team_">

type teams = team list

type team_info = {
  permission: string;
  members_count: int;
  repos_count: int;
  organization: user;
  inherit team
} <ocaml field_prefix="team_info_">

type team_infos = team_info list

